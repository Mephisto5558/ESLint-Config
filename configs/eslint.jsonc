{
  // [ESLint] https://eslint.org/docs/latest/rules/ | Using "warn" wherever applicable
  //  Possible Problems
  "array-callback-return": [
    "error",
    {
      "allowImplicit": false,
      "checkForEach": false,
      "allowVoid": true
    }
  ],
  "constructor-super": "off", // Handled by `sonarjs/super-invocation`
  "for-direction": "off", // Handled by `sonarjs/for-loop-increment-sign`
  "getter-return": [
    "error",
    {
      "allowImplicit": false
    }
  ],
  "no-async-promise-executor": "warn",
  "no-await-in-loop": "off", // Ratelimits
  "no-class-assign": "error",
  "no-compare-neg-zero": "error",
  "no-cond-assign": "off", // Handled by `sonarjs/no-nested-assignment`
  "no-const-assign": "error",
  "no-constant-binary-expression": "error", // Partially handled by `@typescript-eslint/no-unnecessary-condition`
  "no-constant-condition": [ // Partially handled by `@typescript-eslint/no-unnecessary-condition`
    "error",
    {
      "checkLoops": "allExceptWhileTrue"
    }
  ],
  "no-constructor-return": "warn",
  "no-control-regex": "off", // Handled by `regexp/no-control-character`
  "no-debugger": "warn",
  "no-dupe-args": "warn",
  "no-dupe-class-members": "off", // Handled by `@typescript-eslint/no-dupe-class-members`
  "no-dupe-else-if": "off", // Handled by `sonarjs/no-identical-conditions`
  "no-dupe-keys": "warn",
  "no-duplicate-case": "off", // Handled by `sonarjs/no-identical-conditions`
  "no-duplicate-imports": "off", // Handled by `import-x/no-duplicates`
  "no-empty-character-class": "off", // Handled by `regexp/no-empty-character-class`
  "no-empty-pattern": [
    "warn",
    {
      "allowObjectPatternsAsParameters": false
    }
  ],
  "no-ex-assign": "warn",
  "no-fallthrough": [
    "warn",
    {
      // "commentPattern": 
      "allowEmptyCase": false,
      "reportUnusedFallthroughComment": true
    }
  ],
  "no-func-assign": "warn",
  "no-import-assign": "error",
  "no-inner-declarations": [
    "error",
    "both",
    {
      "blockScopedFunctions": "disallow"
    }
  ],
  "no-invalid-regexp": "off", // Handled by `regexp/no-invalid-regexp`, `regexp/no-non-standard-flag`
  "no-irregular-whitespace": [
    "error",
    {
      // It should be escaped unicode sequences and not the literal character
      "skipStrings": false,
      "skipComments": false,
      "skipRegExps": true, // Handled by `regexp/no-invisible-character`
      "skipTemplates": false,
      "skipJSXText": false
    }
  ],
  "no-loss-of-precision": "error",
  "no-misleading-character-class": "off", // Handled by `regexp/no-misleading-unicode-character`
  "no-new-native-nonconstructor": "off", // Handled by `unicorn/new-for-builtins`
  "no-obj-calls": "error",
  /* Also affects implicit arrow function returns and {"allowVoid": true} does not use type info
  so it is incompatible with @typescript-eslint/no-meaningless-void-operator */
  "no-promise-executor-return": [
    "warn",
    {
      "allowVoid": true
    }
  ],
  "no-prototype-builtins": "warn",
  "no-self-assign": [
    "warn",
    {
      "props": true
    }
  ],
  "no-self-compare": "off", // Handled by `sonarjs/no-identical-expressions`
  "no-setter-return": "warn",
  "no-sparse-arrays": "warn",
  "no-template-curly-in-string": "warn",
  "no-this-before-super": "off", // Handled by `sonarjs/super-invocation`
  "no-unassigned-vars": "error",
  "no-undef": [
    // Handled by `@typescript-eslint/no-unsafe-assignment`, `@typescript-eslint/no-unsafe-call` except for typeof checks
    "error",
    {
      "typeof": true
    }
  ],
  "no-unexpected-multiline": "warn",
  "no-unmodified-loop-condition": "warn",
  "no-unreachable": "warn",
  "no-unreachable-loop": [
    "warn",
    {
      "ignore": []
    }
  ],
  "no-unsafe-finally": "warn",
  "no-unsafe-negation": [
    "error",
    {
      "enforceForOrderingRelations": true
    }
  ],
  "no-unsafe-optional-chaining": "off", // Handled by `@typescript-eslint/no-unnecessary-condition`, `@typescript-eslint/no-unsafe-member-access`, `@typescript-eslint/no-unsafe-call`, `@typescript-eslint/no-unsafe-assignment`
  "no-unused-private-class-members": "warn",
  "no-unused-vars": "off", // Handled by `@typescript-eslint/no-unused-vars`
  "no-use-before-define": "off", // Handled by `@typescript-eslint/no-use-before-define`
  "no-useless-assignment": "warn",
  "no-useless-backreference": "off", // Handled by `regexp/no-useless-backreference`
  "require-atomic-updates": [
    "warn",
    {
      "allowProperties": false
    }
  ],
  "use-isnan": [
    "error",
    {
      "enforceForSwitchCase": true,
      "enforceForIndexOf": true
    }
  ],
  "valid-typeof": [
    "error",
    {
      "requireStringLiterals": true
    }
  ],
  //  Suggestions
  "accessor-pairs": [
    "warn",
    {
      "setWithoutGet": true,
      "getWithoutSet": false,
      "enforceForClassMembers": true,
      "enforceForTSTypes": true
    }
  ],
  "arrow-body-style": [
    "warn",
    "as-needed",
    {
      "requireReturnForObjectLiteral": false
    }
  ],
  "block-scoped-var": "off", // Handled by `no-inner-declarations`
  "camelcase": [
    "warn",
    {
      "properties": "always",
      "ignoreDestructuring": false,
      "ignoreImports": false,
      "ignoreGlobals": false,
      "allow": []
    }
  ],
  "capitalized-comments": [
    "warn",
    "never",
    {
      "line": {
        // full uppercase first word, any sentence, any unicode code point
        "ignorePattern": "^[^a-z]+|.*\\.(\\s|$)|U\\+[0-9A-Fa-f]{4,6}",
        "ignoreInlineComments": false,
        "ignoreConsecutiveComments": false
      },
      "block": {
        // full uppercase first word, any sentence, any unicode code point
        "ignorePattern": "^[^a-z]+|.*\\.(\\s|$)|U\\+[0-9A-Fa-f]{4,6}",
        "ignoreInlineComments": false,
        "ignoreConsecutiveComments": false
      }
    }
  ],
  "class-methods-use-this": "off", // Handled by `@typescript-eslint/no-var`
  "complexity": "off", // Handled by `sonarjs/cyclomatic-complexity`
  "consistent-return": "off", // Handled by `@typescript-eslint/consistent-return`
  "consistent-this": "off", // Handled by `@typescript-eslint/no-this-alias`
  "curly": [
    "warn",
    "multi-or-nest"
  ],
  "default-case": "off",
  "default-case-last": "off", // Handled by `sonarjs/-prefer-default-last`
  "default-param-last": "off", // Handled by `@typescript-eslint/default-param-last`
  "dot-notation": "off", // Handled by `@typescript-eslint/dot-notation`
  "eqeqeq": "off",
  // "eqeqeq": ["warn", "always"], // will be included later
  "func-name-matching": "off", // Handled by `func-style`
  "func-names": [
    "warn",
    "as-needed",
    {
      "generators": "as-needed"
    }
  ],
  "func-style": [
    "warn",
    "declaration",
    {
      "allowArrowFunctions": true,
      "allowTypeAnnotation": false,
      "overrides": {
        // "namedExports": 
      }
    }
  ],
  "grouped-accessor-pairs": [
    "warn",
    "getBeforeSet",
    {
      "enforceForTSTypes": true
    }
  ],
  "guard-for-in": "off", // Handled by `sonarjs/for-in`
  "id-denylist": "off",
  "id-length": [
    "warn",
    {
      "min": 2,
      "max": 40,
      "properties": "always",
      "exceptions": [
        "a", // first item in .sort() 
        "b", // second item in .sort()
        "e", // entry
        "i", // index
        "k", // key
        "v", // value
        "_" // omitted function param, e.g. (_, a) => a
      ]
      // "exceptionPatterns": 
    }
  ],
  "id-match": "off", // Handled by `camelcase`
  "init-declarations": "off", // Handled by `@typescript-eslint/init-declarations`
  "logical-assignment-operators": [ // Partially handled by `@typescript-eslint/prefer-nullish-coalescing`
    "warn",
    "always",
    {
      "enforceForIfStatements": true
    }
  ],
  "max-classes-per-file": "off",
  "max-depth": [
    "warn",
    4
  ],
  "max-lines": [
    "warn",
    {
      "max": 300,
      "skipBlankLines": true,
      "skipComments": true
    }
  ],
  "max-lines-per-function": "off", // Handled by `sonarjs/max-lines-per-function`
  "max-nested-callbacks": [
    "warn",
    2
  ], // promises are to use whenever possible
  "max-params": "off", // Handled by `@typescript-eslint/max-params`
  "max-statements": "off", // Handled by `sonarjs/cognitive-complexity`, `sonarjs/cyclomatic-complexity`
  "new-cap": [
    "warn",
    {
      "newIsCap": true,
      "capIsNew": true,
      // "newIsCapExceptions": ,
      // "capIsNewExceptions": ,
      // "capIsNewExceptionPattern": ,
      "properties": true
    }
  ],
  "no-alert": "warn",
  "no-array-constructor": "off", // Handled by `@typescript-eslint/no-array-constructor`
  "no-bitwise": "off", // Handled by `sonarjs/bitwise-operators`
  "no-caller": "warn",
  "no-case-declarations": "warn",
  "no-console": "off",
  "no-continue": "off",
  "no-delete-var": "error",
  "no-div-regex": "warn",
  "no-else-return": [
    "warn",
    {
      "allowElseIf": true
    }
  ],
  "no-empty": [
    "warn",
    {
      "allowEmptyCatch": false
    }
  ],
  "no-empty-function": "off", // Handled by `@typescript-eslint/no-empty-function`
  "no-empty-static-block": "warn",
  "no-eq-null": "off", // Handled by `unicorn/no-null`
  "no-eval": [
    "warn",
    {
      "allowIndirect": false
    }
  ],
  "no-extend-native": [
    "warn",
    {
      "exceptions": []
    }
  ],
  "no-extra-bind": "warn",
  "no-extra-boolean-cast": [
    "warn",
    {
      "enforceForInnerExpressions": true
    }
  ],
  "no-extra-label": "off", // Handled by `no-labels`
  "no-global-assign": "off", // Handled by `no-implicit-globals`, `sonarjs/no-built-in-override`
  "no-implicit-coercion": [
    "warn",
    {
      "boolean": false,
      "number": true,
      "string": true,
      "disallowTemplateShorthand": false,
      "allow": []
    }
  ],
  "no-implicit-globals": "warn",
  "no-implied-eval": "off", // Handled by `@typescript-eslint/no-implied-eval`
  "no-inline-comments": "off", // Handled by `@stylistic/max-len`
  "no-invalid-this": "off", // Handled by `@typescript-eslint/no-invalid-this`
  "no-iterator": "error",
  "no-label-var": "warn",
  "no-labels": [
    "error",
    {
      "allowLoop": false,
      "allowSwitch": false
    }
  ],
  "no-lone-blocks": "warn",
  "no-lonely-if": "warn",
  "no-loop-func": "off", // Handled by `@typescript-eslint/no-loop-func`
  "no-magic-numbers": "off", // Handled by `@typescript-eslint/no-magic-numbers`
  "no-multi-assign": [
    "warn",
    {
      "ignoreNonDeclaration": false
    }
  ],
  "no-multi-str": "warn",
  "no-negated-condition": "off", // Handled by `unicorn/no-negated-condition` because unicorn has an autofix option for it
  "no-nested-ternary": "off", // Handled by `unicorn/no-nested-ternary`
  "no-new": "warn",
  "no-new-func": "off", // Handled by `@typescript-eslint/no-implied-eval`
  "no-new-wrappers": "off", // Handled by `unicorn/new-for-builtins`
  "no-nonoctal-decimal-escape": "warn",
  "no-object-constructor": "warn", // Doesn't seem to report except as a parsing error
  "no-octal": "warn",
  "no-octal-escape": "warn",
  "no-param-reassign": "off", // See https://eslint.org/docs/latest/rules/no-param-reassign#when-not-to-use-it
  "no-plusplus": "off", // Handled by `@stylistic/space-unary-ops`
  "no-proto": "warn",
  "no-redeclare": "off", // Handled by `@typescript-eslint/no-redeclare`
  "no-regex-spaces": "off", // Handled by `regexp/prefer-quantifier`
  "no-restricted-exports": "off",
  "no-restricted-globals": "off",
  "no-restricted-imports": "off", // Handled by `@typescript-eslint/no-restricted-imports`
  "no-restricted-properties": "off",
  "no-restricted-syntax": "off",
  "no-return-assign": "off", // Handled by `sonarjs/no-nested-assignment`
  "no-script-url": "warn",
  "no-sequences": "warn",
  "no-shadow": "off", // Handled by `@typescript-eslint/no-shadow`
  "no-shadow-restricted-names": "off", // Handled by `sonarjs/no-built-in-override` except for `const undefined = 5`; `no-implicit-globals`
  "no-ternary": "off",
  "no-throw-literal": "off", // Handled by `@typescript-eslint/only-throw-error
  "no-undef-init": "off", // Handled by `unicorn/no-useless-undefined`
  "no-undefined": "off",
  "no-underscore-dangle": [
    "warn",
    {
      "allow": [
        // `@mephisto5558/i18n-provider` methods
        "__",
        "array__"
      ],
      "allowAfterThis": false,
      "allowAfterSuper": false,
      "allowAfterThisConstructor": false,
      "enforceInMethodNames": true,
      "enforceInClassFields": true,
      "allowInArrayDestructuring": true,
      "allowInObjectDestructuring": true,
      "allowFunctionParams": true
    }
  ],
  "no-unneeded-ternary": [
    "warn",
    {
      "defaultAssignment": true // Handled by `@typescript-eslint/prefer-nullish-coalescing`, `unicorn/prefer-logical-operator-over-ternary`
    }
  ],
  "no-unused-expressions": "off", // Handled by `@typescript-eslint/no-unused-expressions`
  "no-unused-labels": "warn",
  "no-useless-call": "warn",
  "no-useless-catch": "warn",
  "no-useless-computed-key": [
    "warn",
    {
      "enforceForClassMembers": true
    }
  ],
  "no-useless-concat": "warn",
  "no-useless-constructor": "off", // Handled by `@typescript-eslint/no-useless-constructor`
  "no-useless-escape": "off", // Handled by `regexp/no-useless-escape`
  "no-useless-rename": [
    "warn",
    {
      "ignoreImport": false,
      "ignoreExport": false,
      "ignoreDestructuring": false
    }
  ],
  "no-useless-return": "off", // Handled by `sonarjs/no-redundant-jump`
  "no-var": "error",
  "no-void": "off", // Cannot allow `return void xyz`
  "no-warning-comments": [
    "warn",
    {
      "terms": [
        "todo",
        "fixme"
      ],
      "location": "anywhere"
      // "decoration": []
    }
  ],
  "no-with": "error",
  "object-shorthand": [
    "warn",
    "properties",
    {
      "avoidQuotes": true
      // "ignoreConstructors": true,
      // "methodsIgnorePattern": 
      // "avoidExplicitReturnArrows": true
    }
  ],
  "one-var": [
    "warn",
    {
      "initialized": "consecutive",
      "uninitialized": "consecutive"
    }
  ],
  "operator-assignment": [
    "warn",
    "always"
  ],
  "prefer-arrow-callback": [
    "warn",
    {
      "allowNamedFunctions": false,
      "allowUnboundThis": false
    }
  ],
  "prefer-const": [
    "warn",
    {
      "destructuring": "all",
      "ignoreReadBeforeAssign": false
    }
  ],
  "prefer-destructuring": "off", // Handled by `@typescript-eslint/prefer-destructuring`
  "prefer-exponentiation-operator": "warn",
  "prefer-named-capture-group": "off", // Handled by `regexp/prefer-named-capture-group`
  "prefer-numeric-literals": "warn",
  "prefer-object-has-own": "warn",
  "prefer-object-spread": "warn",
  "prefer-promise-reject-errors": "off", // Handled by `@typescript-eslint/prefer-promise-reject-errors`
  "prefer-regex-literals": [
    "warn",
    {
      "disallowRedundantWrapping": true
    }
  ],
  "prefer-rest-params": "warn",
  "prefer-spread": "off", // Handled by `unicorn/prefer-spread`
  "prefer-template": "off", // Incompatible with `@stylistic/max-len`
  "preserve-caught-error": [
    "warn",
    {
      "requireCatchParameter": true
    }
  ],
  "radix": [
    "warn",
    "as-needed"
  ],
  "require-await": "off", // Handled by `@typescript-eslint/require-await`
  "require-unicode-regexp": "off", // Handled by `regexp/no-misleading-unicode-character`
  "require-yield": "warn",
  "sort-imports": "off", // TODO: add eslint-plugin-import
  "sort-keys": "off",
  "sort-vars": "off",
  "strict": [
    "warn",
    "safe"
  ],
  "symbol-description": "warn",
  "vars-on-top": "warn",
  "yoda": [
    "warn",
    "never",
    {
      "exceptRange": false,
      "onlyEquality": false
    }
  ],
  //  Layout & Formatting
  "unicode-bom": "warn"
}