{
  // [TYPESCRIPT-ESLINT] https://typescript-eslint.io/rules | Using "warn" wherever applicable
  "array-type": [
    "error",
    {
      "default": "array"
    }
  ],
  "await-thenable": "error",
  "ban-ts-comment": "warn",
  "ban-tslint-comment": "off",
  "class-literal-property-style": "error",
  "class-methods-use-this": "warn",
  "consistent-generic-constructors": [
    "error",
    "constructor"
  ],
  "consistent-indexed-object-style": [
    "error",
    "record"
  ],
  "consistent-return": "off",
  "consistent-type-assertions": [
    "error",
    {
      "assertionStyle": "as"
    }
  ],
  "consistent-type-definitions": "off",
  "consistent-type-exports": "error",
  "consistent-type-imports": [
    "error",
    {
      "prefer": "type-imports",
      "fixStyle": "separate-type-imports"
    }
  ],
  "default-param-last": "error",
  "dot-notation": [
    "error",
    {
      "allowPrivateClassPropertyAccess": false,
      "allowProtectedClassPropertyAccess": false,
      "allowIndexSignaturePropertyAccess": true
    }
  ],
  "explicit-function-return-type": "off",
  "explicit-member-accessibility": "off",// Set in `.eslintrc.js` for only TS files
  "explicit-module-boundary-types": "off",// Set in `.eslintrc.js` for only TS files
  "init-declarations": "off",
  "max-params": "off",
  "member-ordering": "off",
  "method-signature-style": [
    "error",
    "method"
  ],
  "naming-convention": "off", // too complex and covered by other rules
  "no-array-constructor": "error",
  "no-array-delete": "error",
  "no-base-to-string": [
    "error",
    {
      "ignoredTypeNames": [
        "DiscordAPIError" // Has a custom toString
      ]
    }
  ],
  "no-confusing-non-null-assertion": "error",
  "no-confusing-void-expression": "off",
  "no-deprecated": "warn",
  "no-dupe-class-members": "error",
  "no-duplicate-enum-values": "error",
  "no-duplicate-type-constituents": "error",
  "no-dynamic-delete": "warn",
  "no-empty-function": "error",
  "no-empty-object-type": "error",
  "no-explicit-any": "error",
  "no-extra-non-null-assertion": "error",
  "no-extraneous-class": "error",
  "no-floating-promises": "warn",
  "no-for-in-array": "warn",
  "no-implied-eval": "error",
  "no-import-type-side-effects": "error",
  "no-inferrable-types": [
    "error",
    {
      "ignoreParameters": true
    }
  ],
  "no-invalid-this": "error",
  "no-invalid-void-type": "error",
  "no-loop-func": "warn",
  "no-magic-numbers": [
    "warn",
    {
      "ignore": [
        -1,
        0,
        1,
        2,
        10
      ],
      "ignoreDefaultValues": true,
      "ignoreClassFieldInitialValues": true,
      "detectObjects": true,
      "ignoreEnums": true,
      "ignoreReadonlyClassProperties": true
    }
  ],
  "no-meaningless-void-operator": "error",
  "no-misused-new": "error",
  "no-misused-promises": [
    "error",
    {
      "checksVoidReturn": false
    }
  ],
  "no-mixed-enums": "error",
  "no-namespace": "error",
  "no-non-null-asserted-nullish-coalescing": "error",
  "no-non-null-asserted-optional-chain": "error",
  "no-non-null-assertion": "error",
  "no-redeclare": "error",
  "no-redundant-type-constituents": "error",
  "no-require-imports": "off",
  "no-restricted-imports": "off",
  "no-restricted-types": "off",
  "no-shadow": [
    "warn",
    {
      "allow": [
        "a",
        "b",
        "e",
        "i",
        "k",
        "v",
        "err",
        "res"
      ]
    }
  ],
  "no-this-alias": "error",
  "no-unnecessary-boolean-literal-compare": "error",
  "no-unnecessary-condition": [
    "error",
    {
      "allowConstantLoopConditions": true
    }
  ],
  "no-unnecessary-parameter-property-assignment": "error",
  "no-unnecessary-qualifier": "error",
  "no-unnecessary-template-expression": "error",
  "no-unnecessary-type-arguments": "error",
  "no-unnecessary-type-assertion": "error",
  "no-unnecessary-type-constraint": "error",
  "no-unnecessary-type-parameters": "error",
  "no-unsafe-argument": "off",// Set in `.eslintrc.js` for only TS files
  "no-unsafe-assignment": "off",// Set in `.eslintrc.js` for only TS files
  "no-unsafe-call": "off",// Set in `.eslintrc.js` for only TS files
  "no-unsafe-declaration-merging": "error",
  "no-unsafe-enum-comparison": "error",
  "no-unsafe-function-type": "error",
  "no-unsafe-member-access": "off",// Set in `.eslintrc.js` for only TS files
  "no-unsafe-return": "off",// Set in `.eslintrc.js` for only TS files
  "no-unsafe-type-assertion": "warn",
  "no-unsafe-unary-minus": "error",
  "no-unused-expressions": [
    "error",
    {
      "allowShortCircuit": true,
      "allowTernary": true
    }
  ],
  "no-unused-vars": [
    "error",
    {
      "vars": "all",
      "args": "all",
      "caughtErrors": "all",
      "argsIgnorePattern": "^_",
      "destructuredArrayIgnorePattern": "^_.+",
      "varsIgnorePattern": "^_.+"
    }
  ],
  "no-use-before-define": [
    "error",
    {
      "functions": false,
      "allowNamedExports": true
    }
  ],
  "no-useless-constructor": "error",
  "no-useless-empty-export": "error",
  "no-wrapper-object-types": "error",
  "non-nullable-type-assertion-style": "error",
  "only-throw-error": "error",
  "parameter-properties": "error",
  "prefer-as-const": "error",
  "prefer-destructuring": [
    "error",
    {
      "AssignmentExpression": {
        // These two values should not be changed for compatibility reasons
        // (with `unicorn/no-unreadable-array-destructing`)
        "array": false,
        "object": true
      }
    }
  ],
  "prefer-enum-initializers": "warn",
  "prefer-find": "error",
  "prefer-for-of": "error",
  "prefer-function-type": "warn",
  "prefer-includes": "error",
  "prefer-literal-enum-member": "error",
  "prefer-namespace-keyword": "warn",
  "prefer-nullish-coalescing": [
    "error",
    {
      "ignoreConditionalTests": true
    }
  ],
  "prefer-optional-chain": "error",
  "prefer-promise-reject-errors": "error",
  "prefer-readonly": "off",
  "prefer-readonly-parameter-types": "off",
  "prefer-reduce-type-parameter": "error",
  "prefer-regexp-exec": "off", // Handled by `regexp/prefer-regexp-test`
  "prefer-return-this-type": "error",
  "prefer-string-starts-ends-with": "error",
  "promise-function-async": [
    "error",
    {
      "checkArrowFunctions": false
    }
  ],
  "related-getter-setter-pairs": "error",
  "require-array-sort-compare": "error",
  "require-await": "error",
  "restrict-plus-operands": "warn",
  "restrict-template-expressions": [
    "error",
    {
      "allowAny": true,
      "allowArray": true,
      "allowBoolean": true,
      "allowNullish": true,
      "allowNumber": true,
      "allowRegExp": true
    }
  ],
  "return-await": "off",
  "strict-boolean-expressions": [
    "error",
    {
      "allowString": true,
      "allowNumber": true,
      "allowNullableObject": true,
      "allowNullableBoolean": true,
      "allowNullableString": true,
      "allowNullableNumber": false,
      "allowNullableEnum": false,
      "allowAny": true // definitely not optimal, but needed in js projects.
    }
  ],
  "switch-exhaustiveness-check": [
    "error",
    {
      "considerDefaultExhaustiveForUnions": true
    }
  ],
  "triple-slash-reference": "warn",
  "typedef": "warn",
  "unbound-method": "off", // Handled by `custom/unbound-method`
  "unified-signatures": "error",
  "use-unknown-in-catch-callback-variable": "off"
}