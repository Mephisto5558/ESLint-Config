{
  // [ESLint] https://eslint.org/docs/latest/rules/ | Using "warn" wherever applicable
  //  Possible Problems
  "array-callback-return": "error",
  "constructor-super": "error",
  "for-direction": "error",
  "getter-return": "error",
  "no-async-promise-executor": "error",
  "no-await-in-loop": "off",
  "no-class-assign": "error",
  "no-compare-neg-zero": "error",
  "no-cond-assign": [
    "error",
    "except-parens"
  ],
  "no-const-assign": "error",
  "no-constant-binary-expression": "error",
  "no-constant-condition": "error",
  "no-constructor-return": "warn",
  "no-control-regex": "error",
  "no-debugger": "error",
  "no-dupe-args": "error",
  "no-dupe-class-members": "error",
  "no-dupe-else-if": "off", // Handled by `sonarjs/no-identical-conditions`
  "no-dupe-keys": "error",
  "no-duplicate-case": "off", // Handled by `sonarjs/no-identical-conditions`
  "no-duplicate-imports": "error",
  "no-empty-character-class": "error",
  "no-empty-pattern": "error",
  "no-ex-assign": "error",
  "no-fallthrough": "warn",
  "no-func-assign": "error",
  "no-import-assign": "error",
  "no-inner-declarations": [
    "error",
    "both"
  ],
  "no-invalid-regexp": "error",
  "no-irregular-whitespace": [
    "error",
    {
      // It should be escaped unicode sequences and not the literal character
      "skipStrings": false
    }
  ],
  "no-loss-of-precision": "warn",
  "no-misleading-character-class": "error",
  "no-new-native-nonconstructor": "error",
  "no-new-symbol": "off", // handled by `no-new-native-nonconstructor`
  "no-obj-calls": "error",
  "no-promise-executor-return": "off", // because this also affects `new Promise(res => x.on('y', z => res(z)));`
  "no-prototype-builtins": "error",
  "no-self-assign": "error",
  "no-self-compare": "error",
  "no-setter-return": "warn",
  "no-sparse-arrays": "error",
  "no-template-curly-in-string": "warn",
  "no-this-before-super": "error",
  "no-undef": [
    "error",
    {
      "typeof": true
    }
  ],
  "no-unexpected-multiline": "warn",
  "no-unmodified-loop-condition": "warn",
  "no-unreachable": "error",
  "no-unreachable-loop": "error",
  "no-unsafe-finally": "error",
  "no-unsafe-negation": "error",
  "no-unsafe-optional-chaining": "error",
  "no-unused-private-class-members": "error",
  "no-unused-vars": "error",
  "no-use-before-define": [
    "error",
    {
      "functions": false
    }
  ],
  "no-useless-backreference": "error",
  "require-atomic-updates": "warn",
  "use-isnan": "error",
  "valid-typeof": "error",
  //  Suggestions
  "accessor-pairs": "warn",
  "arrow-body-style": [
    "error",
    "as-needed"
  ],
  "block-scoped-var": "off", // Handled by `no-var`
  "camelcase": "error",
  "capitalized-comments": "off",
  "class-methods-use-this": "warn",
  "complexity": "off", // The day I decide to make my code less complex will never come.
  "consistent-return": "off",
  "consistent-this": "off",
  "curly": [
    "error",
    "multi-or-nest"
  ],
  "default-case": "off",
  "default-case-last": "error",
  "default-param-last": "error",
  "dot-notation": "error",
  // "eqeqeq": ["error", "always"], // will be included later
  "func-name-matching": "off", // Handled by `func-style`
  "func-names": [
    "error",
    "as-needed"
  ],
  "func-style": [
    "error",
    "declaration",
    {
      "allowArrowFunctions": true
    }
  ],
  "grouped-accessor-pairs": [
    "error",
    "getBeforeSet"
  ],
  "guard-for-in": "warn",
  "id-denylist": "off",
  "id-length": [
    "error",
    {
      "min": 2,
      "max": 40,
      "exceptions": [
        "a", // first item in .sort() 
        "b", // second item in .sort()
        "e", // entry
        "i", // index
        "k", // key
        "v", // value
        "_" // omitted function param, e.g. (_, a) => a
      ]
    }
  ],
  "id-match": "off", // Handled by `camelcase`
  "init-declarations": "off",
  "logical-assignment-operators": [
    "error",
    "always",
    {
      "enforceForIfStatements": true
    }
  ],
  "max-classes-per-file": "off",
  "max-depth": [
    "warn",
    5
  ],
  "max-lines": [
    "warn",
    {
      "max": 300,
      "skipBlankLines": true,
      "skipComments": true
    }
  ],
  "max-lines-per-function": "off", // See `complexity`
  "max-nested-callbacks": [
    "warn",
    2
  ], // promises are to use whenever possible
  "max-params": "off",
  "max-statements": "off",
  "new-cap": "error",
  "no-alert": "error",
  "no-array-constructor": "error",
  "no-bitwise": "off",
  "no-caller": "error",
  "no-case-declarations": "error",
  "no-console": "off",
  "no-continue": "off",
  "no-delete-var": "error",
  "no-div-regex": "warn",
  "no-else-return": "error",
  "no-empty": "error",
  "no-empty-function": "error",
  "no-empty-static-block": "error",
  "no-eq-null": "off", // Handled by `unicorn/no-null`
  "no-eval": "error",
  "no-extend-native": "off",
  "no-extra-bind": "error",
  "no-extra-boolean-cast": "error",
  "no-extra-label": "error",
  "no-global-assign": "error",
  "no-implicit-coercion": "off",
  "no-implicit-globals": "error",
  "no-implied-eval": "error",
  "no-inline-comments": "off",
  "no-invalid-this": "error",
  "no-iterator": "error",
  "no-label-var": "warn",
  "no-labels": "error",
  "no-lone-blocks": "error",
  "no-lonely-if": "error",
  "no-loop-func": "warn",
  "no-magic-numbers": "off",
  "no-multi-assign": "error",
  "no-multi-str": "error",
  "no-negated-condition": "off", // Handled by `unicorn/no-negated-condition` because unicorn has an autofix option for it
  "no-nested-ternary": "off", // better Handled by `unicorn/no-nested-ternary`
  "no-new": "warn",
  "no-new-func": "error",
  "no-new-wrappers": "error",
  "no-nonoctal-decimal-escape": "error",
  "no-object-constructor": "error",
  "no-octal": "error",
  "no-octal-escape": "error",
  "no-param-reassign": "off",
  "no-plusplus": "off",
  "no-proto": "error",
  "no-redeclare": "error",
  "no-regex-spaces": "error",
  "no-restricted-exports": "off",
  "no-restricted-globals": "off",
  "no-restricted-imports": "off",
  "no-restricted-properties": "off",
  "no-restricted-syntax": "off",
  "no-return-assign": "error",
  "no-script-url": "error",
  "no-sequences": "error",
  "no-shadow": [
    "warn",
    {
      "allow": [
        "a",
        "b",
        "e",
        "i",
        "k",
        "v",
        "err",
        "res"
      ]
    }
  ],
  "no-shadow-restricted-names": "error",
  "no-ternary": "off",
  "no-throw-literal": "error",
  "no-undef-init": "error",
  "no-undefined": "off",
  "no-underscore-dangle": "off",
  "no-unneeded-ternary": "error",
  "no-unused-expressions": [
    "error",
    {
      "allowShortCircuit": true,
      "allowTernary": true
    }
  ],
  "no-unused-labels": "error",
  "no-useless-call": "error",
  "no-useless-catch": "error",
  "no-useless-computed-key": "error",
  "no-useless-concat": "error",
  "no-useless-constructor": "error",
  "no-useless-escape": "error",
  "no-useless-rename": "error",
  "no-useless-return": "error",
  "no-var": "error",
  "no-void": "off",
  "no-warning-comments": "off",
  "no-with": "error",
  "object-shorthand": [
    "error",
    "properties"
  ],
  "one-var": "off",
  "operator-assignment": "error",
  "prefer-arrow-callback": "error",
  "prefer-const": [
    "error",
    {
      "destructuring": "all"
    }
  ],
  "prefer-destructuring": [
    "error",
    {
      "AssignmentExpression": {
         // These two values should not be changed for compatibility reasons
         // (with `unicorn/no-unreadable-array-destructing`)
        "array": false,
        "object": true
      }
    }
  ],
  "prefer-exponentiation-operator": "warn",
  "prefer-named-capture-group": "off",
  "prefer-numeric-literals": "off",
  "prefer-object-has-own": "error",
  "prefer-object-spread": "error",
  "prefer-promise-reject-errors": "error",
  "prefer-regex-literals": [
    "error",
    {
      "disallowRedundantWrapping": true
    }
  ],
  "prefer-rest-params": "error",
  "prefer-spread": "off", // Handled by `unicorn/prefer-spread`
  "prefer-template": "off", // Can't allow multiline
  "radix": [
    "error",
    "as-needed"
  ],
  "require-await": "error",
  "require-unicode-regexp": "off",
  "require-yield": "error",
  "sort-imports": "off", // Can't make local files go last
  "sort-keys": "off",
  "sort-vars": "off",
  "strict": "error",
  "symbol-description": "error",
  "vars-on-top": "error",
  "yoda": [
    "error",
    "never"
  ],
  "unicode-bom": "warn"
}